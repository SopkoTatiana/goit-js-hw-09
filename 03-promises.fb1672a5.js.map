{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAiDA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,EAxDA,CACXQ,KAAMC,SAASC,cAAc,WAG1BF,KAAKG,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAMC,iBAEN,MAAML,EAAOI,EAAME,eAEjBC,UAAYf,MAAAgB,EAAKC,KAAEA,EAAIC,OAAEA,IACvBV,EACEW,EAAS,CACbnB,MAAOoB,OAAOJ,EAAMK,OACpBJ,KAAMG,OAAOH,EAAKI,OAClBH,OAAQE,OAAOF,EAAOG,QAGxB,IAAIC,EAAeH,EAAOnB,MAE1B,GAAImB,EAAOnB,MAAQ,GAAKmB,EAAOF,KAAO,GAAKE,EAAOD,QAAU,EAE1D,YADAtB,EAAA2B,OAAOC,QAAQ,iCAmBnB,SAAwBC,GACtB,IAAK,MAAMC,KAAMD,EACfC,EAAGL,MAAQ,E,CAjBbM,CAAenB,EAAKO,UAEpB,IAAK,IAAIa,EAAI,EAAGA,EAAIT,EAAOD,OAAQU,GAAK,EACtC9B,EAAc8B,EAAGN,GACdO,MAAK,EAAC9B,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA2B,OAAOO,QAAQ,qBAAqB/B,QAAeC,MAAU,IAE9D+B,OAAM,EAAChC,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA2B,OAAOC,QAAQ,oBAAoBzB,QAAeC,MAAU,IAGhEsB,GAAgBH,EAAOF,I","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const form = event.currentTarget;\n  const {\n    elements: { delay, step, amount },\n  } = form;\n  const values = {\n    delay: Number(delay.value),\n    step: Number(step.value),\n    amount: Number(amount.value),\n  };\n\n  let summaryDelay = values.delay;\n\n  if (values.delay < 0 || values.step < 0 || values.amount <= 0) {\n    Notify.failure('Please input positive values');\n    return;\n  }\n\n  clearFormInput(form.elements);\n\n  for (let i = 1; i < values.amount; i += 1) {\n    createPromise(i, summaryDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n\n    summaryDelay += values.step;\n  }\n}\n\nfunction clearFormInput(obj) {\n  for (const el of obj) {\n    el.value = '';\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.5;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","form","document","querySelector","addEventListener","event","preventDefault","currentTarget","elements","delay1","step","amount","values","Number","value","summaryDelay","Notify","failure","obj","el","$47d4ff9957288465$var$clearFormInput","i","then","success","catch"],"version":3,"file":"03-promises.fb1672a5.js.map"}