{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,UAEa,CACXC,KAAMC,SAASC,cAAc,WAG1BF,KAAKG,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAMC,iBAEN,MACEC,UAAYC,MAAAC,EAAKC,KAAEA,EAAIC,OAAEA,IACvBN,EAAMO,cACJC,EAAS,CACbL,MAAOM,OAAOL,EAAMM,OACpBL,KAAMI,OAAOJ,EAAKK,OAClBJ,OAAQG,OAAOH,EAAOI,QAExB,IAAIC,EAAU,EACVC,EAAeJ,EAAOL,MAE1B,GAAIK,EAAOL,MAAQ,GAAKK,EAAOH,KAAO,GAAKG,EAAOF,QAAU,EAE1D,YADAZ,EAAAmB,OAAOC,QAAQ,gCAIjBC,YAAW,KACT,MAAMC,EAAWC,aAAY,KAC3BN,GAAW,EAEPA,EAAUH,EAAOF,OACnBY,cAAcF,IAiBtB,SAAuBG,EAAUhB,GAC/B,MAAMiB,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,EACFI,EAAQ,C,SAAEL,E,MAAUhB,IAEpBsB,EAAO,C,SAAEN,E,MAAUhB,GAAQ,G,CAnB3BuB,CAAcf,EAASC,GACpBe,MAAK,EAACR,SAAEA,EAAQhB,MAAEA,MACjBT,EAAAmB,OAAOe,QAAQ,qBAAqBT,QAAehB,MAAU,IAE9D0B,OAAM,EAACV,SAAEA,EAAQhB,MAAEA,MAClBT,EAAAmB,OAAOC,QAAQ,oBAAoBK,QAAehB,MAAU,IAGhES,GAAgBJ,EAAOH,KAAI,GAC1BG,EAAOH,KAAK,GACdG,EAAOL,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n  const values = {\n    delay: Number(delay.value),\n    step: Number(step.value),\n    amount: Number(amount.value),\n  };\n  let counter = 0;\n  let summaryDelay = values.delay;\n\n  if (values.delay < 0 || values.step < 0 || values.amount <= 0) {\n    Notify.failure('Please input positive values');\n    return;\n  }\n\n  setTimeout(() => {\n    const interval = setInterval(() => {\n      counter += 1;\n\n      if (counter > values.amount) {\n        clearInterval(interval);\n        return;\n      }\n\n      createPromise(counter, summaryDelay)\n        .then(({ position, delay }) => {\n          Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        });\n\n      summaryDelay += values.step;\n    }, values.step);\n  }, values.delay);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.5;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$iQIUW","parcelRequire","form","document","querySelector","addEventListener","event","preventDefault","elements","delay","delay1","step","amount","currentTarget","values","Number","value","counter","summaryDelay","Notify","failure","setTimeout","interval","setInterval","clearInterval","position","shouldResolve","Math","random","Promise","resolve","reject","$47d4ff9957288465$var$createPromise","then","success","catch"],"version":3,"file":"03-promises.df806265.js.map"}