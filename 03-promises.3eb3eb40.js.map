{"mappings":"gfAAA,IAKIA,EALJC,EAAAC,EAAA,SAyCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBL,E,KAhDM,CACXa,KAAMC,SAASC,cAAc,WAI1BF,KAAKG,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAMC,iBAEN,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALd,MAAOkB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAErBC,EAAS,CACbpB,MAAOqB,OAAOJ,EAAMK,OACpBJ,KAAMG,OAAOH,EAAKI,OAClBH,OAAQE,OAAOF,EAAOG,QAKxB,GAFA3B,EAAeyB,EAAOpB,MAElBoB,EAAOpB,MAAQ,GAAKoB,EAAOF,KAAO,GAAKE,EAAOD,QAAU,EAE1D,YADAvB,EAAA2B,OAAOC,QAAQ,gCAIjB,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAOD,OAAQM,GAAK,EACtC3B,EAAc2B,EAAG9B,GACd+B,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MACjBJ,EAAA2B,OAAOK,QAAQ,qBAAoCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAE1D8B,OAAM,SAAAH,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MAClBJ,EAAA2B,OAAOC,QAAQ,oBAAmCK,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAG5DL,GAAgByB,EAAOF,I","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\nlet summaryDelay;\n\nrefs.form.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n  const values = {\n    delay: Number(delay.value),\n    step: Number(step.value),\n    amount: Number(amount.value),\n  };\n\n  summaryDelay = values.delay;\n\n  if (values.delay < 0 || values.step < 0 || values.amount <= 0) {\n    Notify.failure('Please input positive values');\n    return;\n  }\n\n  for (let i = 1; i < values.amount; i += 1) {\n    createPromise(i, summaryDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n\n    summaryDelay += values.step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.5;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, summaryDelay);\n  });\n}\n"],"names":["$ce04d3a99e08e73b$var$summaryDelay","$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","form","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","values","Number","value","Notify","failure","i","then","param","success","concat","catch"],"version":3,"file":"03-promises.3eb3eb40.js.map"}