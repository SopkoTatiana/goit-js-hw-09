{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,UAEa,CACXC,KAAMC,SAASC,cAAc,WAG1BF,KAAKG,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAMC,iBAEN,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALI,MAAOC,EAAIL,EAAJK,KAAMC,EAAMN,EAANM,OAErBC,EAAS,CACbH,MAAOI,OAAOL,EAAMM,OACpBJ,KAAMG,OAAOH,EAAKI,OAClBH,OAAQE,OAAOF,EAAOG,QAEpBC,EAAU,EACVC,EAAeJ,EAAOH,MAE1B,GAAIG,EAAOH,MAAQ,GAAKG,EAAOF,KAAO,GAAKE,EAAOD,QAAU,EAE1D,YADAd,EAAAoB,OAAOC,QAAQ,gCAIjBC,YAAW,WACT,IAAMC,EAAWC,aAAY,WAqBjC,IAAuBC,EAAUb,EACzBc,GArBFR,GAAW,GAEGH,EAAOD,OACnBa,cAAcJ,KAiBCE,EAbHP,EAaaN,EAbJO,EAcrBO,EAAgBE,KAAKC,SAAW,GAC/B,IAAIC,SAAQ,SAACC,EAASC,GACvBN,EACFK,EAAQ,CAAEN,WAAUb,UAEpBoB,EAAO,CAAEP,WAAUb,S,KAlBhBqB,MAAK,SAAAC,G,IAAGT,EAAQS,EAART,SAAUb,EAAKsB,EAALtB,MACjBZ,EAAAoB,OAAOe,QAAQ,qBAAoCC,OAAfX,EAAS,QAAYW,OAANxB,EAAM,M,IAE1DyB,OAAM,SAAAH,G,IAAGT,EAAQS,EAART,SAAUb,EAAKsB,EAALtB,MAClBZ,EAAAoB,OAAOC,QAAQ,oBAAmCe,OAAfX,EAAS,QAAYW,OAANxB,EAAM,M,IAG5DO,GAAgBJ,EAAOF,K,GACtBE,EAAOF,K,GACTE,EAAOH,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n  const values = {\n    delay: Number(delay.value),\n    step: Number(step.value),\n    amount: Number(amount.value),\n  };\n  let counter = 0;\n  let summaryDelay = values.delay;\n\n  if (values.delay < 0 || values.step < 0 || values.amount <= 0) {\n    Notify.failure('Please input positive values');\n    return;\n  }\n\n  setTimeout(() => {\n    const interval = setInterval(() => {\n      counter += 1;\n\n      if (counter > values.amount) {\n        clearInterval(interval);\n        return;\n      }\n\n      createPromise(counter, summaryDelay)\n        .then(({ position, delay }) => {\n          Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        });\n\n      summaryDelay += values.step;\n    }, values.step);\n  }, values.delay);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.5;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$h6c0i","parcelRequire","form","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","delay","step","amount","values","Number","value","counter","summaryDelay","Notify","failure","setTimeout","interval","setInterval","position","shouldResolve","clearInterval","Math","random","Promise","resolve","reject","then","param","success","concat","catch"],"version":3,"file":"03-promises.df66138c.js.map"}