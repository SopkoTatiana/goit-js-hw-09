{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAKA,IAAIC,EAoCJ,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BH,EAAa,G,EAhDP,CACXW,KAAMC,SAASC,cAAc,WAI1BF,KAAKG,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAMC,iBAEN,MACEC,UAAYd,MAAAe,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAMM,cACJC,EAAS,CACbnB,MAAOoB,OAAOL,EAAMM,OACpBL,KAAMI,OAAOJ,EAAKK,OAClBJ,OAAQG,OAAOH,EAAOI,QAKxB,GAFAxB,EAAesB,EAAOnB,MAElBmB,EAAOnB,MAAQ,GAAKmB,EAAOH,KAAO,GAAKG,EAAOF,QAAU,EAE1D,YADAtB,EAAA2B,OAAOC,QAAQ,gCAIjB,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAOF,OAAQO,GAAK,EACtC1B,EAAc0B,EAAG3B,GACd4B,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBL,EAAA2B,OAAOI,QAAQ,qBAAqB3B,QAAeC,MAAU,IAE9D2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBL,EAAA2B,OAAOC,QAAQ,oBAAoBxB,QAAeC,MAAU,IAGhEH,GAAgBsB,EAAOH,I","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\nlet summaryDelay;\n\nrefs.form.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n  const values = {\n    delay: Number(delay.value),\n    step: Number(step.value),\n    amount: Number(amount.value),\n  };\n\n  summaryDelay = values.delay;\n\n  if (values.delay < 0 || values.step < 0 || values.amount <= 0) {\n    Notify.failure('Please input positive values');\n    return;\n  }\n\n  for (let i = 1; i < values.amount; i += 1) {\n    createPromise(i, summaryDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n\n    summaryDelay += values.step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.5;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, summaryDelay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$summaryDelay","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","form","document","querySelector","addEventListener","event","preventDefault","elements","delay1","step","amount","currentTarget","values","Number","value","Notify","failure","i","then","success","catch"],"version":3,"file":"03-promises.24a62819.js.map"}